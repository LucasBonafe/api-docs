FORMAT: 1A
HOST: http://tiendanube.apiblueprint.org/

# Nuvem Shop / Tienda Nube API

This is the official documentation for the Nuvem Shop / Tienda Nube public API, and it will show you how to use our API to authenticate, make requests, and retrieve data.

>**Disclaimer**: Due to high volume of applications and themes we're receiving to be published in our AppStore and ThemeStore, our response time have become very high. For this reason, we're building a new team that will give you support exclusively, with the sole purpose of helping you bring your service to our customers. In the meantime, you can design applications and themes, and offer them to your customers individually (without publishing them in our site), but with full 100% access to the functionalities offered by Tienda Nube / Nuvem Shop.

## Getting Started

Before you start to code your app integration, you will need to:

1. Sign-up for a partner account at [Nuvem Shop](http://www.nuvemshop.com.br/parceiros) or [Tienda Nube](http://www.tiendanube.com/partners).

2. Once inside your partner's panel, go to the _Apps_ section and create your app in order to get your credentials.

3. Read up on the [authentication](https://tiendanube.docs.apiary.io/#introduction/authentication) to learn how to authenticate and authorize your requests.

4. Read the API docs of the desired resources to learn how to retrieve and manipulate the available data.

## The Basics

This API adheres to the [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) architectural constraints. Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors.

The whole communication with the API is made through HTTP requests, using headers to specify and retrieve metadata and [JSON](https://www.json.org/) as the content format.

Detailed here is some useful information before you start making requests to the API, like URLs, mandatory headers, the available HTTP methods and typical HTTP status codes.

### Base URL

The API is available under the two following URLs and there is no difference between them, so you can choose either one:

* `https://api.nuvemshop.com.br`
* `https://api.tiendanube.com`

The path is prefixed with the store id and the API version, which is currently _v1_, so if we change the API in backward-incompatible ways, we'll bump the version marker and maintain stable support for the old URLs.

Finally, **the base URL must be suffixed with the requested store ID**, so if you want to access the store with id _123456_ via the API the URL will be `https://api.nuvemshop.com.br/v1/123456` or `https://api.tiendanube.com/v1/123456`.

>**Note**: The API is only available over SSL, so you have to specify the protocol (HTTPS) in all URLs.

### Allowed HTTP Methods

| Method | Description |
| --- | --- |
|`GET`| Used to get information about a specific resource. |
|`POST`| Used to create a new resource object. |
|`PUT`| Used to update/replace a resource object. |
|`DELETE`| Used to delete resource objects. |
|`HEAD`| Used to retrieve the headers of a resource. |

>**Note**: For PUT requests with no body attribute, be sure to set the Content-Length header to zero.

### Typical Server Responses

| Code| Description |
| --- | --- |
|`200`| Success. Request completed. |
|`201`| Success. New resource created. |
|`204`| Success. No content to return. Only the status code returns. |
|`400`| Bad Request - [The request could not be parsed](https://tiendanube.docs.apiary.io/#introduction/error-handling/client-errors). |
|`401`| Unauthorized - User is not logged in, [could not be authenticated](https://tiendanube.docs.apiary.io/#introduction/authentication). |
|`403`| Forbidden - Cannot access resource. |
|`404`| Not Found - Resource doesn't exist. |
|`409`| Conflict - Discord with state of the resource on server. Can occur with too many PUT requests. |
|`422`| Unprocessable Entity - [Invalid fields sent](https://tiendanube.docs.apiary.io/#introduction/error-handling/client-errors). |
|`429`| Too Many Requests - [API rate limits exceeded](https://tiendanube.docs.apiary.io/#introduction/usage-limits). |
|`500`| [Internal Server Error](https://tiendanube.docs.apiary.io/#introduction/error-handling/server-errors). |
|`502`| [Bad gateway](https://tiendanube.docs.apiary.io/#introduction/error-handling/server-errors). |
|`503`| [Service unavailable](https://tiendanube.docs.apiary.io/#introduction/error-handling/server-errors). |
|`504`| [Gateway timeout](https://tiendanube.docs.apiary.io/#introduction/error-handling/server-errors). |

### Pagination

Requests that return multiple items (also know as Collections) will be paginated to 30 items by default. 

You can specify further pages with the `page` parameter and also set a custom page size up to 200 with the `per_page` parameter using a query string appended to the URL, like the following:
* `https://api.tiendanube.com/v1/123456/products?page=2&per_page=100`

To check the total count of the results you can use the `X-Total-Count` header that will be returned in every collection resource request.

To check the next and previous links for pagination you can use the `Link` header:

```
    Link: <https://api.tiendanube.com/v1/123456/products?page=3&per_page=100>; rel="next", 
    <https://api.tiendanube.com/v1/123456/products?page=50&per_page=100>; rel="last"
```

The possible `rel` values are:

* **next**: Shows the URL of the immediate next page of results.
* **last**: Shows the URL of the last page of results.
* **first**: Shows the URL of the first page of results.
* **prev**: Shows the URL of the immediate previous page of results.

>**Note**: The page numbering is 1-based and ommiting the page parameter will return the first page.

## Authentication

We follow the OAuth 2 framework for letting users authorize their applications to use Nuvem Shop / Tienda Nube on their own.

We provide authorization and user authentication by a restricted form of OAuth 2. At a glance:
* The only grant type we support is the "authorization code".
* Our access tokens don't expire. They become invalid only after you get a new one, or if the user uninstalls your app.
* Along with the access token we provide a `user_id`, which is the ID of the store. **You need the user_id for making requests to our API**. It is also useful for authenticating app users on your website (see [User Authentication](https://tiendanube.docs.apiary.io/#introduction/authentication/user-authentication)).

### Introduction

When creating an app, you will have to select the scopes it needs and set a redirection URL. The scopes specify the resources for which the app is asking authorization of its users (see [Scopes](https://tiendanube.docs.apiary.io/#introduction/authentication/scopes)). The redirection URL is used as part of the authorization flow (see [Authorization Flow](https://tiendanube.docs.apiary.io/#introduction/authentication/authorization-flow)).

### Authorization Flow

The authorization flow is as follows:
1. Users, from their TiendaNube/NuvemShop admin shop, select your app to install it. Or, alternatively, they go to `https://www.tiendanube.com/apps/(app_id)/authorize` (if they are not logged in, they will be prompted to do so).
2. Users are then redirected to a website where they have to authorize the scopes your app needs (if they have already done this, the step is skipped).
3. Finally, users are redirected to your app's redirection URL with an authorization code.
4. Using your app's credentials and the authorization code, you can obtain an access token by making a POST request to `https://www.tiendanube.com/apps/authorize/token`. (Don't forget to also send `grant_type=authorization_code`, see the example below).

> **Note**: Any of these URLs in the tiendanube.com domain can be replaced for identical ones in the nuvemshop.com.br domain or vice versa.

#### Example:

* If your app's data is:
    * store_id = 123
    * redirection URL = `https://www.example.com/`
    * scopes = `read_orders`, `write_products`
    * client_secret = abcdef

The user then follows these steps:
1. User with ID 789 goes to `https://www.tiendanube.com/apps/123/authorize?state=csrf-code`
2. User accepts scopes.
3. User gets redirected to `https://www.example.com/?code=xyz&state=csrf-code`
4. Then you POST:
`curl https://www.tiendanube.com/apps/authorize/token --data 'client_id=123&client_secret=abcdef&grant_type=authorization_code&code=xyz'`

Finally, you receive the following information:
```
{
       "access_token":"61181d08b7e328d256736hdcb671c3ce50b8af5",
       "token_type":"bearer",
       "scope":"read_orders,write_products",
       "user_id":"789"
}
```

### Scopes

Apps should only ask for the access scopes they need. If an app only needs to read products, it should only ask for the `read_products` scope.

>**Note**: If you ask for any write scope, the read scope is implied.

>**Note**: As [Webhooks](https://github.com/TiendaNube/api-docs/blob/master/resources/webhook.md) rely on other resources, you will only be able to register webhooks for the resources you were granted permission to use.

The available `scopes` are:
* `read_content` / `write_content`
    * Page
* `read_products` / `write_products`
    * Product
    * Product Variant
    * Product Image
    * Category
* `read_customers` / `write_customers`
    * Customer
* `read_orders` / `write_orders`
    * Order
* `read_coupons` / `write_coupons`
    * Coupon
* `write_scripts`
    * Script

### User Authentication

Should you need your app's users to be able to sign-in on your website, you can reuse the Authorization flow for this purpose:
* The login button should be a link to: https://www.tiendanube.com/apps/(app_id)/authorize
* You can sign-in the user with the ID you receive with the new access token.
>**Note**: We [recommend](https://tools.ietf.org/html/rfc6749#section-10.12) you add a `state` parameter for CSRF protection (e.g. a hash of the session cookie), and check it after the redirection.

### Identify Your App

In every API request you _must_ include a `User-Agent` header with the name of your application and a link to it, or your email address so we can get in touch with you. Here are some examples:
* `User-Agent: Super app (http://superapp.com/contact)`
* `User-Agent: Awesome app (awesome@app.com)`
>**Note**: If you don't supply this header, you will get a `400 Bad Request` response.

## Error Handling

### JSON

All data is sent and received as JSON. Our format is to have no root element and we use snake_case to describe attribute keys. This means that you have to send `Content-Type: application/json; charset=utf-8` when POSTing or PUTing data into Tienda Nube/Nuvem Shop.

>**Note**: You will receive a `415 Unsupported Media Type` response code if you leave out the Content-Type header.

### Client Errors

These are the possible types of client errors on API calls that receive request bodies:

* Sending invalid JSON will result in a `400 Bad Request` response.
```
HTTP/1.1 400 Bad Request
Content-Length: 34
{"error": "Problems parsing JSON"}
```

* Sending invalid fields will result in a `422 Unprocessable Entity` response.
```
HTTP/1.1 422 Unprocessable Entity
Content-Length: 47
{
    "src": [
        "can't be blank"
    ]
}
```

### Server Errors

If Nuvem Shop/Tienda Nube is having trouble, you might see a 5xx error. `500 Internal Server Error` means that the app is entirely down, but you might also see `502 Bad Gateway`, `503 Service Unavailable`, or `504 Gateway Timeout`. It's your responsibility in all of these cases to retry your request later.

## Usage Limits

You can perform up to 500 requests per 5 minutes period from the same app to the same store. If you exceed this limit, you'll get a `429 Too Many Requests` response for subsequent requests. We use the following headers to provide information:

* `X-Rate-Limit-Limit`: Total requests that con be done in a given period.
* `X-Rate-Limit-Remaining`: Remaining requests in the current period.
* `X-Rate-Limit-Reset`: Remaining seconds for the start of the next period.

## Front-end Integration

When using scripts to integrate your app with the storefront, you may want to bind yourself to certain events or access related objects.

While support for this is still being improved, there is one single event you may bind yourself to: `LS.registerOnChangeVariant(callback)` where callback is a function that receives a single argument, a variant, that contains information about the chosen product variant. In particular, `variant.element` contains a string detailing a jQuery selector that you may use in order to obtain a container for the chosen variant's form; this is important when working with themes that have a "quick shop" feature, such as LinkedMan or LinkedWoman, as there may be more than one product form present in a page.

## Suspension of API access due to lack of payment

Being a monthly subscription service, it's possible that a store will not renew its service. In this case, the store will go offline and the API will be inaccessible. The API will also be inaccessible if the app has a recurring price and it's not paid in time.

In either case, all API calls will return a `402 Payment Required` response, Scripts will not be included and Webhooks will not be called. Please make sure you handle this error code to notify the user that he needs to resume his payment instead of displaying a generic server error.

Once the required payment is made, the API becomes accessible again.

>**Note**: If your app needs to know when access to the API is suspended or resumed (because you may have missed a webhook and want to do a full resync, for example), you can register to the app/suspended and app/resumed events using a Webhook.

# Group Store

The Store resource contains general settings and information about a Tienda Nube/Nuvem Shop's store.

## Store Attributes [/store]

+ Attributes
    + id (number) - The unique numeric identifier for the Store
    + name (string) - List of the names of the Store, in every language supported by the store
    + description (string) - List of the descriptions of the Store, in every language supported by the store
    + type (string) - Store type. Examples are "clothing", "sports", "electronic"
    + email (string) - Store owner's e-mail
    + logo (string) - Store logo URL, starting with // (or null if it has no logo)
    + contact_email (string) - Store's contact e-mail
    + facebook (string) - Store's Facebook URL
    + twitter (string) - Store's Twitter URL
    + google_plus (string) - Store's G+ URL
    + instagram (string) - Store's Instagram URL
    + pinterest (string) - Store's Pinterest URL
    + blog (string) - Store's blog URL
    + address (string) - Store's address
    + phone (string) - Store's phone
    + business_id (string) - Business identifier (different for each country) of the company who owns the store
    + business_name (string) - Business name of the company who owns the store
    + business_address (string) - Business address of the company who owns the store
    + customer_accounts (string) - "optional" if the customer is allowed to checkout as guest. "mandatory" if not.
    + plan_name (string) - Name of the Tienda Nube/Nuvem Shop's plan the store is on
    + country (string) - Store's country in ISO 3166-1 format.
    + languages (string) - Store available languages with its currency and whether or not is active
    + domains (string) - List of store's domains
    + original_domain (string) - Original tiendanube.com or nuvemshop.com.br domain for the Store.
    + current_theme (string) - Store's current theme.
    + main_language (string) - Store's main language.
    + main_currency (string) - Store's main currency in ISO 4217 format.
    + admin_language (string) - Store's admin language
    + created_at (string) - Date when the Store was created in ISO 8601 format.

### Retrieve the store information [GET /store{?fields}]

+ Parameters
    + fields (string, optional) - Comma-separated list of fields to include in the response.

+ Request (application/json)

+ Response 200 (application/json)

        {
            "address": null,
            "admin_language": "pt",
            "blog": null,
            "business_id": null,
            "business_name": null,
            "business_address": null,
            "contact_email": "contact@pokestore.com",
            "country": "BR",
            "created_at": "2013-01-01T05:12:51-03:00",
            "customer_accounts": "optional",
            "description": {
                "en": "",
                "es": "",
                "pt": ""
            },
            "domains": [
                "www.pokestore.com",
                "www.another.com"
            ],
            "email": "owner@pokestore.com",
            "facebook": "http://www.facebook.com/pokestore",
            "google_plus": "http://plus.google.com/+pokestore",
            "id": 1234,
            "instagram": "http://www.instagram.com/pokestore",
            "languages": {
                "en": {
                    "currency" : "USD",
                    "active": true
                },
                "es": {
                    "currency" : "ARS",
                    "active": false
                },
                "pt": {
                    "currency" : "BRL",
                    "active": true
                }
            },
            "logo": "//d26lpennugtm8s.cloudfront.net/stores/046/themes/common/logo-ff622335866ee56df3bceed2e9d41469.png",
            "main_currency": "BRL",
            "current_theme": "luxury",
            "main_language": "pt",
            "name": {
                "en": "Poké Store",
                "es": "Poké Tienda",
                "pt": "Poké Loja"
            },
            "original_domain" : "pokeloja.nuvemshop.com.br",
            "phone": null,
            "pinterest": "http://www.pinterest.com/pokestore",
            "plan_name": "Business",
            "type": null,
            "twitter": "http://www.twitter.com/pokestore" 
        }

# Group Product

Work in progress.

## Product

Work in progress.

## Product Variant

Work in progress.

## Product Images

Work in progress.

# Group Category

Work in progress.

# Group Order

## Introduction

An order is created when a customer completes the checkout process. Orders can't be created through the API.

Orders contain 3 important fields that are detailed below. These are `products`, `next_action` and `issues`:

* `products`
    * `product_id` - [Product]() purchased.
    * `variant_id` - [Product Variant]() purchased.
    * `name` - Product's name at the time of purchase.
    * `price` - Product's price at the time of purchase.
    * `quantity` - Quantity purchased.
    * `weight` - Product's weight at the time of purchase.
    * `width` - Product's width at the time of purchase.
    * `height` - Product's height at the time of purchase.
    * `depth` - Product's depth at the time of purchase.
    * `free_shipping` - Indicates if the product has free shipping or not.
    * `issues` - Possibles issues that can happen to an order. Contents are explained below.

* `next_action`
    * `noop` - No action to take.
    * `close` - Order should be closed.
    * `waiting_ipn` - We are waiting for the gateway to update us on the order status, the seller just needs to wait.
    * `waiting_manual_confirmation` - We are waiting for the seller to confirm the transaction.
    * `waiting_packing` - We are waiting for the seller to pack the order items.
    * `waiting_pickup` - We are waiting for the fulfillment provider to pick up the order.
    * `waiting_client_pickup` - We are waiting for the buyer to pick up the order (he shipped it to a seller's B&M store).
    * `waiting_shipment` - We are waiting for the seller to ship the order.

* `issues`
    * `unclaimed_stock` (number) - Can happen due to a race condition while the user is trying to pay the order and another user buys the same item.

> **Note**: The `unclaimed_stock` property of the `issues` attribute has a number value associated to it which represents the number of items claimed by the user with insufficient stock.

## Managing Orders: Examples and Resources [/order]

+ Attributes
    + id (number) - The unique numeric identifier for the Order. It's different from `number`.
    + token (string) - Specifies the location of the Order.
    + number (string) - Unique numberc identifier for an Order used by the shop owner and customers. It's sequential and starts at 100.
    + customer (string) - [Customer](/#reference/customer) that purchased this Order. Only given if the 'read_customers' scope is set for the app.
    + products - List of the products purchased by the `customer`. Contents are explained [above](/#reference/order) and values hold are the ones corresponding to the time the products were purchased.
    + note (string) - Customer's note about the order.
    + owner_note (string) - Store owner's note about the order.
    + coupon (string) - List of coupons applied to the order.
    + discount (string) - Total value of the discount applied to the price of the order.
    + subtotal (string) - Price of the order before shipping.
    + total (string) - Total price of the order including shipping and discounts.
    + total_usd (string) - Total price of the order in US dollars.
    + currency (string) - The total spent's currency in [ISO 4217 format](en.wikipedia.org/wiki/ISO_4217).
    + language (string) - Order's language used by the customer during the checkout process.
    + gateway (string) - The payment gateway used.
    + shipping (string) - The shipping method used.
    + shipping_pickup_type (string) - "ship" if the order is going to be shipped; "pickup" if it's going to be picked up from a store branch.
    + shipping_store_branch_name (string) - If order is going to be picked up, shows the store branch name.
    + shipping_address (string) - The customer's shipping address where the order will be shipped.
    + shipping_tracking_number (string) - The shipping tracking number for the order. This may be null if not available.
    + shipping_min_days (string) - The minimum number of weekdays needed for the order to be delivered.
    + shipping_max_days (string) - The maximum number of weekdays needed for the order to be delivered.
    + shipping_cost_owner (string) - The shipping cost the store owner has to pay to the shipping company.
    + shipping_cost_customer (string) - The shipping cost the customer has to pay to the store owner.
    + billing_address (string) - Billing address for the order.
    + billing_number (string) - Billing number for the order.
    + billing_floor (string) - Billing floor for the order.
    + billing_locality (string) - Billing locality for the order.
    + billing_zipcode (string) - Billing zipcode for the order.
    + billing_city (string) - Billing city for the order.
    + billing_province (string) - Billing province for the order.
    + billing_country (string) - Billing country code for the order.
    + extra (string) - A JSON object containing custom information. Can be set via the API or through custom form fields of name "extra[key]" on the cart's checkout form in the storefront.
    + weight (string) - Order's total weight, in kilograms.
    + status (string) - Order's status. Possible values are "open", "closed" or "cancelled".
    + payment_status (string) - Order's payment status. Possible values are "authorized", "pending", "paid", "abandoned", "refunded" or "voided".
    + shipping_status (string) - Order's shipping status. Possible values are "unpacked", "shipped" or "unshipped".
    + next_action (string) - Next available operation in the orders flow.
    + `shipped_at` (string) - Date when the Order was shipped in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).
    + cancel_reason (string) - Reason why the store owner cancelled an Order. Possible values are "customer", "fraud", "inventory" or "other".
    + `created_at` (string) - Date when the Order was created in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).
    + `updated_at` (string) - Date when the Order was last updated in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).
    + next_action - Specifies the next action to take by the Order. Contents are explained [above](/#reference/order).

### Retrieve A List Of All Orders [GET /orders/{?since_id,status,payment_status,shipping_status,created_at_min,created_at_max,updated_at_min,updated_at_max,total_min,total_max,customer_ids,page,per_page,fields,q}]

+ Parameters
    + since_id (string, optional) - Restrict results to after the specified ID.
    + status (string, optional) - Show Orders with a given state. "any" is the default.
    + payment_status (string, optional) - Show Orders with a given payment state. "any" is the default (it means authorized, pending and paid orders).
    + shipping_status (string, optional) - Show Orders with a given shipping state. "any" is the default.
    + created_at_min (string, optional) - Show Orders created after date (ISO 8601 format).
    + created_at_max (string, optional) - Show Orders created before date (ISO 8601 format).
    + updated_at_min (string, optional) - Show Orders last updated after date (ISO 8601 format).
    + updated_at_max (string, optional) - Show Orders last updated before date (ISO 8601 format).
    + total_min (string, optional) - Show Orders with total value bigger or equals than the specified value.
    + total_max (string, optional) - Show Orders with total value lower or equals than the specified value.
    + customer_ids (string, optional) - Restrict results to the specified customer IDs (comma-separated).
    + page (string, optional) - Page to show.
    + per_page (string, optional) - Amount of results.
    + fields (string, optional, `id,number,price_usd`) - Comma-separated list of fields to include in the response.
    + q (string, optional) - Search Orders by the given number; or containing the given text in the customer name or email.

+ Response 200 (application/json)

        [
            {
              "id": 450789469,
              "number": "101",
              "price_usd": "58.00"
            }
        ]

### Retrieve A Single Order [GET /orders/#{id}{?fields}]

+ Parameters
    + id (number, `450789469`) - The unique numeric identifier for the Order.
    + fields (string, optional) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        {
            "cancel_reason": null,
            "created_at": "2008-01-10T11:00:00-05:00",
            "currency": "USD",
            "gateway": "paypal",
            "id": 450789469,
            "landing_site": "http://www.example.com?source=abc",
            "language": "en",
            "location_id": null,
            "name": "#1001",
            "note": null,
            "number": 1,
            "owner_note": null,
            "payment_status": "pending",
            "shipping": "ups",
            "shipping_status": "unshipped",
            "shipping_tracking_number": null,
            "shipping_min_days": 2,
            "shipping_max_days": 4,
            "shipping_cost_owner": "20.00",
            "shipping_cost_customer": "20.00",
            "status": "open",
            "subtotal": "38.00",
            "token": "898544a54283414238f74cd08f0efd3916f74b75",
            "discount": "0.00",
            "price": "58.00",
            "price_usd": "58.00",
            "weight": "2.00",
            "updated_at": "2008-01-10T11:00:00-05:00",
            "shipped_at": "2008-01-10T11:00:00-05:00",
            "number": 101,
            "coupon": [
              {
                "code": "SUPERDISCOUNT"
              }
            ],
            "products": [
              {
                "depth": null,
                "height": null,
                "price": "19.00",
                "product_id": 1234,
                "quantity": 2,
                "free_shipping": false,
                "variant_id": 101,
                "weight": "2.00",
                "width": null
              }
            ],
            "billing_address": "Evergreen Terrace",
            "billing_city": "Springfield",
            "billing_country": "US",
            "billing_default": true,
            "billing_floor": null,
            "billing_locality": null,
            "billing_number": "742",
            "billing_phone": "555-123-0413",
            "billing_province": "Oregon",
            "billing_zipcode": "97475",
            "extra": {
              "gift-wrap": "deluxe"
            },
            "shipping_pickup_type": "ship",
            "shipping_store_branch_name": null,
            "shipping_address": {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            },
            "customer": {
              "created_at": "2013-01-03T09:11:51-03:00",
              "email": "john.doe@example.com",
              "id": 101,
              "last_order_id": 9001,
              "name": "John Doe",
              "total_spent": "89.00",
              "total_spent_currency": "USD",
              "updated_at": "2013-03-11T09:14:11-03:00",
              "default_address": {
                "address": "Evergreen Terrace",
                "city": "Springfield",
                "country": "US",
                "created_at": "2013-01-03T09:11:51-03:00",
                "default": true,
                "floor": null,
                "id": 1234,
                "locality": null,
                "number": "742",
                "phone": "555-123-0413",
                "province": "Oregon",
                "updated_at": "2013-03-10T11:13:01-03:00",
                "zipcode": "97475"
              }
            }
        }

### Close An Order [POST /orders/#{id}/close]

+ Parameters
    + id (number, `450789469`) - The unique numeric identifier for the Order.

+ Response 200 (application/json)

        {
            "cancel_reason": null,
            "created_at": "2008-01-10T11:00:00-05:00",
            "currency": "USD",
            "gateway": "paypal",
            "id": 450789469,
            "landing_site": "http://www.example.com?source=abc",
            "language": "en",
            "location_id": null,
            "name": "#1001",
            "note": null,
            "number": 1,
            "owner_note": null,
            "payment_status": "pending",
            "shipping": "ups",
            "shipping_status": "unshipped",
            "shipping_tracking_number": null,
            "shipping_min_days": 2,
            "shipping_max_days": 4,
            "shipping_cost_owner": "20.00",
            "shipping_cost_customer": "20.00",
            "status": "closed",
            "subtotal": "38.00",
            "token": "898544a54283414238f74cd08f0efd3916f74b75",
            "discount": "0.00",
            "price": "58.00",
            "price_usd": "58.00",
            "weight": "2.00",
            "updated_at": "2008-01-10T11:00:00-05:00",
            "shipped_at": "2008-01-10T11:00:00-05:00",
            "number": 101,
            "coupon": [
              {
                "code": "SUPERDISCOUNT"
              }
            ],
            "products": [
              {
                "depth": null,
                "height": null,
                "price": "19.00",
                "product_id": 1234,
                "quantity": 2,
                "free_shipping": false,
                "variant_id": 101,
                "weight": "2.00",
                "width": null
              }
            ],
            "billing_address": "Evergreen Terrace",
            "billing_city": "Springfield",
            "billing_country": "US",
            "billing_default": true,
            "billing_floor": null,
            "billing_locality": null,
            "billing_number": "742",
            "billing_phone": "555-123-0413",
            "billing_province": "Oregon",
            "billing_zipcode": "97475",
            "extra": {
              "gift-wrap": "deluxe"
            },
            "shipping_pickup_type": "ship",
            "shipping_store_branch_name": null,
            "shipping_address": {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            },
            "customer": {
              "created_at": "2013-01-03T09:11:51-03:00",
              "email": "john.doe@example.com",
              "id": 101,
              "last_order_id": 9001,
              "name": "John Doe",
              "total_spent": "89.00",
              "total_spent_currency": "USD",
              "updated_at": "2013-03-11T09:14:11-03:00",
              "default_address": {
                "address": "Evergreen Terrace",
                "city": "Springfield",
                "country": "US",
                "created_at": "2013-01-03T09:11:51-03:00",
                "default": true,
                "floor": null,
                "id": 1234,
                "locality": null,
                "number": "742",
                "phone": "555-123-0413",
                "province": "Oregon",
                "updated_at": "2013-03-10T11:13:01-03:00",
                "zipcode": "97475"
              }
            }
        }

### Re-Open A Closed Order [POST /orders/#{id}/open]

+ Parameters
    + id (number, `450789469`) - The unique numeric identifier for the Order.

+ Response 200 (application/json)

        {
            "cancel_reason": null,
            "created_at": "2008-01-10T11:00:00-05:00",
            "currency": "USD",
            "gateway": "paypal",
            "id": 450789469,
            "landing_site": "http://www.example.com?source=abc",
            "language": "en",
            "location_id": null,
            "name": "#1001",
            "note": null,
            "number": 1,
            "owner_note": null,
            "payment_status": "pending",
            "shipping": "ups",
            "shipping_status": "unshipped",
            "shipping_tracking_number": null,
            "shipping_min_days": 2,
            "shipping_max_days": 4,
            "status": "open",
            "subtotal": "38.00",
            "token": "898544a54283414238f74cd08f0efd3916f74b75",
            "discount": "0.00",
            "price": "58.00",
            "price_usd": "58.00",
            "weight": "2.00",
            "updated_at": "2008-01-10T11:00:00-05:00",
            "shipped_at": "2008-01-10T11:00:00-05:00",
            "number": 101,
            "coupon": [
              {
                "code": "SUPERDISCOUNT"
              }
            ],
            "products": [
              {
                "depth": null,
                "height": null,
                "price": "19.00",
                "product_id": 1234,
                "quantity": 2,
                "variant_id": 101,
                "weight": "2.00",
                "width": null
              }
            ],
            "billing_address": "Evergreen Terrace",
            "billing_city": "Springfield",
            "billing_country": "US",
            "billing_default": true,
            "billing_floor": null,
            "billing_locality": null,
            "billing_number": "742",
            "billing_phone": "555-123-0413",
            "billing_province": "Oregon",
            "billing_zipcode": "97475",
            "extra": {
              "gift-wrap": "deluxe"
            },
            "shipping_pickup_type": "ship",
            "shipping_store_branch_name": null,
            "shipping_address": {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            },
            "customer": {
              "created_at": "2013-01-03T09:11:51-03:00",
              "email": "john.doe@example.com",
              "id": 101,
              "last_order_id": 9001,
              "name": "John Doe",
              "total_spent": "89.00",
              "total_spent_currency": "USD",
              "updated_at": "2013-03-11T09:14:11-03:00",
              "default_address": {
                "address": "Evergreen Terrace",
                "city": "Springfield",
                "country": "US",
                "created_at": "2013-01-03T09:11:51-03:00",
                "default": true,
                "floor": null,
                "id": 1234,
                "locality": null,
                "number": "742",
                "phone": "555-123-0413",
                "province": "Oregon",
                "updated_at": "2013-03-10T11:13:01-03:00",
                "zipcode": "97475"
              }
            }
        }

### Fulfill An Order [POST /orders/#{id}/fulfill/{?shipping_tracking_number,notify_customer}]

+ Parameters
    + id (number, `450789469`) - The unique numeric identifier for the Order.
    + shipping_tracking_number (string, `ABC1234`) - Shipment's tracking number provided by the shipping company.
    + notify_customer (string, `true`) - Notify the customer of the cancellation (the default value is true).

+ Response 200 (application/json)

        {
            "cancel_reason": null,
            "created_at": "2008-01-10T11:00:00-05:00",
            "currency": "USD",
            "gateway": "paypal",
            "id": 450789469,
            "landing_site": "http://www.example.com?source=abc",
            "language": "en",
            "location_id": null,
            "name": "#1001",
            "note": null,
            "number": 1,
            "owner_note": null,
            "payment_status": "pending",
            "shipping": "ups",
            "shipping_status": "shipped",
            "shipping_tracking_number": "ABC1234",
            "shipping_min_days": 2,
            "shipping_max_days": 4,
            "shipping_cost_owner": "20.00",
            "shipping_cost_customer": "20.00",
            "status": "open",
            "subtotal": "38.00",
            "token": "898544a54283414238f74cd08f0efd3916f74b75",
            "discount": "0.00",
            "price": "58.00",
            "price_usd": "58.00",
            "weight": "2.00",
            "updated_at": "2008-01-10T11:00:00-05:00",
            "shipped_at": "2008-01-10T11:00:00-05:00",
            "number": 101,
            "coupon": [
              {
                "code": "SUPERDISCOUNT"
              }
            ],
            "products": [
              {
                "depth": null,
                "height": null,
                "price": "19.00",
                "product_id": 1234,
                "quantity": 2,
                "free_shipping": false,
                "variant_id": 101,
                "weight": "2.00",
                "width": null
              }
            ],
            "billing_address": "Evergreen Terrace",
            "billing_city": "Springfield",
            "billing_country": "US",
            "billing_default": true,
            "billing_floor": null,
            "billing_locality": null,
            "billing_number": "742",
            "billing_phone": "555-123-0413",
            "billing_province": "Oregon",
            "billing_zipcode": "97475",
            "extra": {
              "gift-wrap": "deluxe"
            },
            "shipping_pickup_type": "ship",
            "shipping_store_branch_name": null,
            "shipping_address": {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            },
            "customer": {
              "created_at": "2013-01-03T09:11:51-03:00",
              "email": "john.doe@example.com",
              "id": 101,
              "last_order_id": 9001,
              "name": "John Doe",
              "total_spent": "89.00",
              "total_spent_currency": "USD",
              "updated_at": "2013-03-11T09:14:11-03:00",
              "default_address": {
                "address": "Evergreen Terrace",
                "city": "Springfield",
                "country": "US",
                "created_at": "2013-01-03T09:11:51-03:00",
                "default": true,
                "floor": null,
                "id": 1234,
                "locality": null,
                "number": "742",
                "phone": "555-123-0413",
                "province": "Oregon",
                "updated_at": "2013-03-10T11:13:01-03:00",
                "zipcode": "97475"
              }
            }
        }

### Cancel An Order [POST /orders/#{id}/cancel/{?reason,email,restock}]

+ Parameters
    + id (number, `450789469`) - The unique numeric identifier for the Order.
    + reason (string, optional) - The reason for the order cancellation. Possible values are "customer", "inventory", "fraud" or "other".
    + email (string, optional) - Notify the customer of the cancellation (the default value is true).
    + restock (string, optional) - Restock the store's products (the default value is true).

+ Response 200 (application/json)

        {
            "cancel_reason": null,
            "created_at": "2008-01-10T11:00:00-05:00",
            "currency": "USD",
            "gateway": "paypal",
            "id": 450789469,
            "landing_site": "http://www.example.com?source=abc",
            "language": "en",
            "location_id": null,
            "name": "#1001",
            "note": null,
            "number": 1,
            "owner_note": null,
            "payment_status": "pending",
            "shipping": "ups",
            "shipping_status": "unshipped",
            "shipping_tracking_number": null,
            "shipping_min_days": 2,
            "shipping_max_days": 4,
            "shipping_cost_owner": "20.00",
            "shipping_cost_customer": "20.00",
            "status": "cancelled",
            "subtotal": "38.00",
            "token": "898544a54283414238f74cd08f0efd3916f74b75",
            "discount": "0.00",
            "price": "58.00",
            "price_usd": "58.00",
            "weight": "2.00",
            "updated_at": "2008-01-10T11:00:00-05:00",
            "shipped_at": "2008-01-10T11:00:00-05:00",
            "number": 101,
            "coupon": [
              {
                "code": "SUPERDISCOUNT"
              }
            ],
            "products": [
              {
                "depth": null,
                "height": null,
                "price": "19.00",
                "product_id": 1234,
                "quantity": 2,
                "free_shipping": false,
                "variant_id": 101,
                "weight": "2.00",
                "width": null
              }
            ],
            "billing_address": "Evergreen Terrace",
            "billing_city": "Springfield",
            "billing_country": "US",
            "billing_default": true,
            "billing_floor": null,
            "billing_locality": null,
            "billing_number": "742",
            "billing_phone": "555-123-0413",
            "billing_province": "Oregon",
            "billing_zipcode": "97475",
            "extra": {
              "gift-wrap": "deluxe"
            },
            "shipping_pickup_type": "ship",
            "shipping_store_branch_name": null,
            "shipping_address": {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            },
            "customer": {
              "created_at": "2013-01-03T09:11:51-03:00",
              "email": "john.doe@example.com",
              "id": 101,
              "last_order_id": 9001,
              "name": "John Doe",
              "total_spent": "89.00",
              "total_spent_currency": "USD",
              "updated_at": "2013-03-11T09:14:11-03:00",
              "default_address": {
                "address": "Evergreen Terrace",
                "city": "Springfield",
                "country": "US",
                "created_at": "2013-01-03T09:11:51-03:00",
                "default": true,
                "floor": null,
                "id": 1234,
                "locality": null,
                "number": "742",
                "phone": "555-123-0413",
                "province": "Oregon",
                "updated_at": "2013-03-10T11:13:01-03:00",
                "zipcode": "97475"
              }
            }
        }

### Change/Update An Order [PUT /orders/#{id}{?owner_note,status}]

> **Note**: As far as changing an Order's attributes, you can only modify the `owner_note` one for now.

+ Parameters
    + owner_note (string, optional, `Need to gift wrap this order`) - Store owner's note about the order.
    + status (string, optional, `paid`) - Order's status. Possible values are "open", "closed" or "cancelled". -- TODO -- Change this.

+ Response 200 (application/json)

        {
            "cancel_reason": null,
            "created_at": "2008-01-10T11:00:00-05:00",
            "currency": "USD",
            "gateway": "paypal",
            "id": 450789469,
            "landing_site": "http://www.example.com?source=abc",
            "language": "en",
            "location_id": null,
            "name": "#1001",
            "note": null,
            "number": 1,
            "owner_note": "Need to gift wrap this order",
            "payment_status": "paid",
            "shipping": "ups",
            "shipping_status": "unshipped",
            "shipping_tracking_number": null,
            "shipping_min_days": 2,
            "shipping_max_days": 4,
            "shipping_cost_owner": "20.00",
            "shipping_cost_customer": "20.00",
            "status": "open",
            "subtotal": "38.00",
            "token": "898544a54283414238f74cd08f0efd3916f74b75",
            "discount": "0.00",
            "price": "58.00",
            "price_usd": "58.00",
            "weight": "2.00",
            "updated_at": "2008-01-10T11:00:00-05:00",
            "shipped_at": "2008-01-10T11:00:00-05:00",
            "number": 101,
            "coupon": [
              {
                "code": "SUPERDISCOUNT"
              }
            ],
            "products": [
              {
                "depth": null,
                "height": null,
                "price": "19.00",
                "product_id": 1234,
                "quantity": 2,
                "free_shipping": false,
                "variant_id": 101,
                "weight": "2.00",
                "width": null
              }
            ],
            "billing_address": "Evergreen Terrace",
            "billing_city": "Springfield",
            "billing_country": "US",
            "billing_default": true,
            "billing_floor": null,
            "billing_locality": null,
            "billing_number": "742",
            "billing_phone": "555-123-0413",
            "billing_province": "Oregon",
            "billing_zipcode": "97475",
            "extra": {
              "gift-wrap": "deluxe"
            },
            "shipping_pickup_type": "ship",
            "shipping_store_branch_name": null,
            "shipping_address": {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            },
            "customer": {
              "created_at": "2013-01-03T09:11:51-03:00",
              "email": "john.doe@example.com",
              "id": 101,
              "last_order_id": 9001,
              "name": "John Doe",
              "total_spent": "89.00",
              "total_spent_currency": "USD",
              "updated_at": "2013-03-11T09:14:11-03:00",
              "default_address": {
                "address": "Evergreen Terrace",
                "city": "Springfield",
                "country": "US",
                "created_at": "2013-01-03T09:11:51-03:00",
                "default": true,
                "floor": null,
                "id": 1234,
                "locality": null,
                "number": "742",
                "phone": "555-123-0413",
                "province": "Oregon",
                "updated_at": "2013-03-10T11:13:01-03:00",
                "zipcode": "97475"
              }
            }
        }

# Group Customer

## Introduction

Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout.

## Managing Customers: Examples and Resources [/customer]

+ Attributes
    + id (number) - The unique numeric identifier for the Customer.
    + name (string) - Name of the Customer.
    + email (string) - E-mail of the Customer.
    + phone (string) - Phone number of the Customer (not necessarily the same as the address's phone).
    + identification (string) - Customer's identification (in Brazil for example, it would be the CPF/CNPJ).
    + note (string) - Store owner's notes about the customer.
    + default_address (string) - Default shipping address of the Customer.
    + addresses (string) - List of shipping addresses for the Customer.
    + billing_address (string) - Billing address of the Customer.
    + billing_number (string) - Billing number of the Customer.
    + billing_floor (string) - Billing floor of the Customer.
    + billing_locality (string) - Billing locality of the Customer.
    + billing_zipcode (string) - Billing zipcode of the Customer.
    + billing_city (string) - Billing city of the Customer.
    + billing_province (string) - Billing province of the Customer.
    + billing_country (string) - Billing country code of the Customer.
    + extra (string) - A JSON object containing custom information. It can be set via the API or through custom form fields of name "extra[key]" on the Customer's register form in the storefront.
    + total_spent (string) - The total amount of money that the Customer has spent at the store.
    + total_spent_currency (string) - The total spent's currency in [ISO 4217 format](en.wikipedia.org/wiki/ISO_4217).
    + last_order_id (string) - The id of the Customer's last Order.
    + active (string) - "true" if the Customer activated the account or "false" if the Customer hasn't activated it.
    + `created_at` (string) - Date when the Customer was created in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).
    + `updated_at` (string) - Date when the Customer was last updated in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).

### Retrieve A List Of All Consumers [GET /customers/{?since_id,created_at_min,created_at_max,updated_at_min,updated_at_max,page,per_page,fields}]

+ Parameters
    + since_id (number, `105`) - Restrict results to after the specified ID.
    + created_at_min (string) - Show Customers created after date (ISO 8601 format).
    + created_at_max (string) - Show Customers created before date (ISO 8601 format).
    + updated_at_min (string) - Show Customers last updated after date (ISO 8601 format).
    + updated_at_max (string) - Show Customers last updated before date (ISO 8601 format).
    + page (number) - Page to show.
    + per_page (string) - Amount of results.
    + fields (string) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        [
            {
              "created_at": "2013-01-03T09:11:51-03:00",
              "email": "john.doe@example.com",
              "id": 101,
              "identification": "28776255670",
              "last_order_id": 9001,
              "name": "John Doe",
              "note": null,
              "phone": null,
              "total_spent": "89.00",
              "total_spent_currency": "USD",
              "updated_at": "2013-03-11T09:14:11-03:00",
              "billing_address": "Evergreen Terrace",
              "billing_city": "Springfield",
              "billing_country": "US",
              "billing_floor": null,
              "billing_locality": null,
              "billing_number": "742",
              "billing_phone": "555-123-0413",
              "billing_province": "Oregon",
              "billing_zipcode": "97475",
              "extra": {
                "number_of_children": "2",
                "gender": "male"
              },
              "default_address": {
                "address": "Evergreen Terrace",
                "city": "Springfield",
                "country": "US",
                "created_at": "2013-01-03T09:11:51-03:00",
                "default": true,
                "floor": null,
                "id": 1234,
                "locality": null,
                "number": "742",
                "phone": "555-123-0413",
                "province": "Oregon",
                "updated_at": "2013-03-10T11:13:01-03:00",
                "zipcode": "97475"
              },
              "addresses": [
                {
                  "address": "Evergreen Terrace",
                  "city": "Springfield",
                  "country": "US",
                  "created_at": "2013-01-03T09:11:51-03:00",
                  "default": true,
                  "floor": null,
                  "id": 1234,
                  "locality": null,
                  "number": "742",
                  "phone": "555-123-0413",
                  "province": "Oregon",
                  "updated_at": "2013-03-10T11:13:01-03:00",
                  "zipcode": "97475"
                }
              ]
            }
        ]

### Retrieve A Single Customer [GET /customers/#{id}{?fields}]

+ Parameters
    + id (number, `101`) - The unique numeric identifier for the Customer.
    + fields (string, optional) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        {
          "created_at": "2013-01-03T09:11:51-03:00",
          "email": "john.doe@example.com",
          "id": 101,
          "identification": "28776255670",
          "last_order_id": 9001,
          "name": "John Doe",
          "note": null,
          "phone": null,
          "total_spent": "89.00",
          "total_spent_currency": "USD",
          "updated_at": "2013-03-11T09:14:11-03:00",
          "billing_address": "Evergreen Terrace",
          "billing_city": "Springfield",
          "billing_country": "US",
          "billing_floor": null,
          "billing_locality": null,
          "billing_number": "742",
          "billing_phone": "555-123-0413",
          "billing_province": "Oregon",
          "billing_zipcode": "97475",
          "extra": {
            "number_of_children": "2",
            "gender": "male"
          },
          "default_address": {
            "address": "Evergreen Terrace",
            "city": "Springfield",
            "country": "US",
            "created_at": "2013-01-03T09:11:51-03:00",
            "default": true,
            "floor": null,
            "id": 1234,
            "locality": null,
            "number": "742",
            "phone": "555-123-0413",
            "province": "Oregon",
            "updated_at": "2013-03-10T11:13:01-03:00",
            "zipcode": "97475"
          },
          "addresses": [
            {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            }
          ]
        }

### Create a new Customer [POST /customers/{?send_email_invite,password}]

+ Parameters
    + send_email_invite (string, `true`) - Send an email to notify the customer of their registration.
    + password (string, `mysupersecretpassword`) - User's password.

+ Request (application/json)

        {
            "name": "First Last",
            "email": "first.last@example.com",
            "addresses": [
              {
                "address": "My Street",
                "city": "My City",
                "country": "BR",
                "locality": "Morumbi",
                "number": "123",
                "phone": "11 1234-5678",
                "province": "São Paulo",
                "zipcode": "05653-071"
              }
            ],
            "send_email_invite": true,
            "password": "mysupersecretpassword"
        }

+ Response 201 (application/json)

        {
          "created_at": "2013-06-01T09:11:51-03:00",
          "email": "john.doe+modified@example.com",
          "id": 101,
          "identification": "28776255670",
          "last_order_id": 9001,
          "name": "John Doe",
          "note": null,
          "total_spent": "89.00",
          "total_spent_currency": "USD",
          "updated_at": "2013-06-01T09:11:51-03:00",
          "billing_address": null,
          "billing_city": null,
          "billing_country": null,
          "billing_floor": null,
          "billing_locality": null,
          "billing_number": null,
          "billing_phone": null,
          "billing_province": null,
          "billing_zipcode": null,
          "extra": {
            "number_of_children": "2",
            "gender": "male"
          },
          "default_address": {
            "address": "My Street",
            "city": "My City",
            "country": "BR",
            "created_at": "2013-06-01T09:11:51-03:00",
            "default": true,
            "floor": null,
            "id": 1240,
            "locality": null,
            "number": "123",
            "phone": "11 1234-5678",
            "province": "São Paulo",
            "updated_at": "2013-06-01T09:11:51-03:00",
            "zipcode": "05653-071"
          },
          "addresses": [
            {
              "address": "My Street",
              "city": "My City",
              "country": "BR",
              "created_at": "2013-06-01T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1240,
              "locality": null,
              "number": "123",
              "phone": "11 1234-5678",
              "province": "São Paulo",
              "updated_at": "2013-06-01T09:11:51-03:00",
              "zipcode": "05653-071"
            }
          ]
        }

### Modify An Existing Customer [PUT /customers/#{id}]

+ Parameters
    + id (number, `5123`) - The unique numeric identifier for the Customer.

+ Request (application/json)

        {
          "created_at": "2013-01-03T09:11:51-03:00",
          "email": "john.doe+modified@example.com",
          "id": 101,
          "identification": "28776255670",
          "last_order_id": 9001,
          "name": "John Doe",
          "note": null,
          "phone": "911",
          "total_spent": "89.00",
          "total_spent_currency": "USD",
          "billing_address": "Evergreen Terrace",
          "billing_city": "Springfield",
          "billing_country": "US",
          "billing_floor": null,
          "billing_locality": null,
          "billing_number": "742",
          "billing_phone": "555-123-0413",
          "billing_province": "Oregon",
          "billing_zipcode": "97475",
          "extra": {
            "number_of_children": "2",
            "gender": "male"
          },
          "updated_at": "2013-03-11T09:14:11-03:00",
          "default_address": {
            "address": "Evergreen Terrace",
            "city": "Springfield",
            "country": "US",
            "created_at": "2013-01-03T09:11:51-03:00",
            "default": true,
            "floor": null,
            "id": 1234,
            "locality": null,
            "number": "742",
            "phone": "555-123-0413",
            "province": "Oregon",
            "updated_at": "2013-03-10T11:13:01-03:00",
            "zipcode": "97475"
          },
          "addresses": [
            {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            }
          ]
        }

+ Response 200 (application/json)

        {
          "created_at": "2013-01-03T09:11:51-03:00",
          "email": "john.doe+modified@example.com",
          "id": 101,
          "identification": "28776255670",
          "last_order_id": 9001,
          "name": "John Doe",
          "note": null,
          "phone": "911",
          "total_spent": "89.00",
          "total_spent_currency": "USD",
          "updated_at": "2013-06-01T09:14:11-03:00",
          "billing_address": "Evergreen Terrace",
          "billing_city": "Springfield",
          "billing_country": "US",
          "billing_floor": null,
          "billing_locality": null,
          "billing_number": "742",
          "billing_phone": "555-123-0413",
          "billing_province": "Oregon",
          "billing_zipcode": "97475",
          "extra": {
            "number_of_children": "2",
            "gender": "male"
          },
          "default_address": {
            "address": "Evergreen Terrace",
            "city": "Springfield",
            "country": "US",
            "created_at": "2013-01-03T09:11:51-03:00",
            "default": true,
            "floor": null,
            "id": 1234,
            "locality": null,
            "number": "742",
            "phone": "555-123-0413",
            "province": "Oregon",
            "updated_at": "2013-03-10T11:13:01-03:00",
            "zipcode": "97475"
          },
          "addresses": [
            {
              "address": "Evergreen Terrace",
              "city": "Springfield",
              "country": "US",
              "created_at": "2013-01-03T09:11:51-03:00",
              "default": true,
              "floor": null,
              "id": 1234,
              "locality": null,
              "number": "742",
              "phone": "555-123-0413",
              "province": "Oregon",
              "updated_at": "2013-03-10T11:13:01-03:00",
              "zipcode": "97475"
            }
          ]
        }

# Group Coupons

## Introduction

A discount coupon is a way for a store to provide discounts for its customers. There are three type of coupons. Percentage, absolute and shipping. The percentage type indicates that the value is a percentage discount. The type absolute indicates that the value is an absolute amount of discount. And finally the type shipping indicates that the discount value is on the shipping.

## Managing Coupons: Examples and Resources [/coupon]

+ Attributes
    + `id` (number) - The unique numeric identifier for the coupon.
    + `code` (string) - String that identifies the coupon.
    + `type` (string) - Type of the coupon. Can take the following values: percentage, absolute or shipping.
    + `valid` (string) - Flag (true or false) that indicates if the coupon is valid or not.
    + `start_date` (string) - Date from which the coupon is valid.
    + `end_date` (string) - Date of overdue of the coupon.
    + `deleted_at` (string) - Date when the coupon was deleted. The value is NULL if the coupon is still valid.
    + `max_uses` (string) - Max number of times the coupon can be used.
    + `value` (string) - Value of the discount
    + `min_price` (string) - Indicates the minimun value of the bill for applying the discount
    + `categories` (string) - List of [Category](/#reference/category) objects representing the categories of the store where the discount applies.

### Retrieve A List Of All Coupons [GET /coupons/{?min_start_date,min_end_date,max_start_date,max_end_date,valid,created_at_min,created_at_max,updated_at_min,updated_at_max,page,per_page,fields}]

+ Parameters
    + min_start_date (string, optional) - The minimum start_date to filter.
    + min_end_date (string, optional) - The minimum end_date to filter.
    + max_start_date (string, optional) - The maximum start_date to filter.
    + max_end_date (string, optional) - The maximum end_date to filter.
    + valid (string, optional, `true`) - Flag (true of false) for filtering valid coupons.
    + created_at_min (string, optional) - Show Products created after date (ISO 8601 format).
    + created_at_max (string, optional) - Show Products created before date (ISO 8601 format).
    + updated_at_min (string, optional) - Show Products last updated after date (ISO 8601 format).
    + updated_at_max (string, optional) - Show Products last updated before date (ISO 8601 format).
    + page (string, optional) - Page to show.
    + per_page (number, optional) - Amount of results.
    + fields (string, optional) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        [
            {
                "id": 32965,
                "code": "PR2",
                "type": "percentage",
                "value": "30.00",
                "valid": true,
                "used": 0,
                "max_uses": 100,
                "start_date": "2014-05-08",
                "end_date": "2014-06-08",
                "min_price": 10,
                "categories": [
                    {
                        "id": 117023,
                        "name": {
                            "es": "Oxido N\u00edtrico (NO2)",
                            "en": "Oxido N\u00edtrico (NO2)"
                        },
                        "description": {
                            "es": "",
                            "en": ""
                        },
                        "handle": {
                            "es": "oxido-nitrico-no2",
                            "en": "oxido-nitrico-no2"
                        },
                        "parent": null,
                        "subcategories": [],
                        "created_at": "2013-03-22T14:40:55+0000",
                        "updated_at": "2014-05-28T20:07:05+0000"
                    }
                ]
            },
            {
                "id": 32966,
                "code": "PR23",
                "type": "percentage",
                "value": "30.00",
                "valid": true,
                "used": 0,
                "max_uses": 100,
                "start_date": "2014-05-08",
                "end_date": "2014-06-08",
                "min_price": 10,
                "categories": null
            },
            {
                "id": 32964,
                "code": "PR4",
                "type": "percentage",
                "value": "30.00",
                "valid": true,
                "used": 0,
                "max_uses": 100,
                "start_date": "2014-06-07",
                "end_date": "2014-06-08",
                "min_price": 10,
                "categories": [
                    {
                        "id": 117023,
                        "name": {
                            "es": "Oxido N\u00edtrico (NO2)",
                            "en": "Oxido N\u00edtrico (NO2)"
                        },
                        "description": {
                            "es": "",
                            "en": ""
                        },
                        "handle": {
                            "es": "oxido-nitrico-no2",
                            "en": "oxido-nitrico-no2"
                        },
                        "parent": null,
                        "subcategories": [],
                        "created_at": "2013-03-22T14:40:55+0000",
                        "updated_at": "2014-05-28T20:07:05+0000"
                    }
                ]
            }
        ]

### Retrieve A Single Coupon [GET /coupons/#{id}]

+ Parameters
    + id (number, `32964`) - The unique numeric identifier for the Coupon.

+ Response 200 (application/json)

        {
            "id": 32964,
            "code": "PR4",
            "type": "percentage",
            "value": "30.00",
            "valid": true,
            "used": 0,
            "max_uses": 100,
            "start_date": "2014-06-07",
            "end_date": "2014-06-08",
            "min_price": 10,
            "categories": [
                {
                    "id": 117023,
                    "name": {
                        "es": "Oxido N\u00edtrico (NO2)",
                        "en": "Oxido N\u00edtrico (NO2)"
                    },
                    "description": {
                        "es": "",
                        "en": ""
                    },
                    "handle": {
                        "es": "oxido-nitrico-no2",
                        "en": "oxido-nitrico-no2"
                    },
                    "parent": null,
                    "subcategories": [],
                    "created_at": "2013-03-22T14:40:55+0000",
                    "updated_at": "2014-05-28T20:07:05+0000"
                }
            ]
        }

### Create A New Coupon [POST /coupons/{code}{?value,fields}]

+ Parameters
    + code (string, required) - Must be unique and can contain only alfanumeric characters.
    + value (string, optional) - The value is mandatory if the type is percentage or absolute.
    + fields (string, optional) - Comma-separated list of fields to include in the response.

+ Request (application/json)

        {
            "code": "test_code",
            "type": "percentage",
            "value": "30.00",
            "max_uses": 100,
            "min_price": 10,
            "categories": null,
            "start_date": "2014-05-08",
            "end_date": "2014-06-08"
        }

+ Response 201 (application/json)

        {
            "id": 32967,
            "code": "test_code",
            "type": "percentage",
            "value": "30.00",
            "valid": true,
            "used": null,
            "max_uses": 100,
            "start_date": "2014-05-08",
            "end_date": "2014-06-08",
            "min_price": 10,
            "categories": null
        }

### Modify An Existing Coupon [PUT /coupons/#{id,code}{?type,value}]

+ Parameters
    + id (number, `32967`)
    + code (string, `OTRAPRUEBA`)
    + type (string, `absolute`)
    + value (number, `50`)

+ Response 200 (application/json)

        {
            "id": 32967,
            "code": "OTRAPRUEBA",
            "type": "absolute",
            "value": 50,
            "valid": true,
            "used": 0,
            "max_uses": 100,
            "start_date": "2014-05-08",
            "end_date": "2014-06-08",
            "min_price": 10,
            "categories": null
        }

### Delete A Coupon [DELETE /coupons/#{id}]

+ Parameters
    + id (number, `32967`)

+ Response 200 (application/json)

        {
          
        }

# Group Metafields

## Introduction

The metafields are Namespaced Key - Value store for Apps.

The metafields can only be associated with the following entities:
* Product
* Product_Variant
* Category
* Page

To do that you need to set the `owner_resource` to one of the above, an example would be `owner_resource='Product'`.

An example would be to use it in an app for Bookstores that require that you associate a book (product) with it's author and genre to provide an advanced search of books by this fields.

## Managing Metafields: Examples and Resources [/metafield]

+ Attributes
    + `owner_resource` (string) - Type of entity to which is associated the Metafield.
    + `id` (number) - The unique numeric identifier for the Metafield.
    + `namespace` (string) - The namespace where the Metafield makes sense. It can be any string that starts with a letter followed only by: `a-z`, `A-Z`, `0-9` or `_`.
    + `key` (string) - String that identifies the Metafield in some namespace. It can be any string that starts with a letter followed only by: `a-z`, `A-Z`, `0-9` or `_`.
    + `description` (string, optional) - String explaining the Metafield's meaning (optional).
    + `value` (string) - Metafield's value (string).
    + `owner_resource` (string) - Type of entity to which is associated the Metafield.
    + `owner_id` (string) - Entity id to which is associated the Metafield.
    + `created_at` (string) - Date when the Metafield was created in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).
    + `updated_at` (string) - Date when the Metafield was last updated in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).

### Retrieve A List Of All Metafields [GET /metafields/#{owner_resource}{?owner_id,namespace,key,created_at_min,created_at_max,updated_at_min,updated_at_max,page,per_page,fields}]

+ Parameters
    + key (string, optional) - Metafield's key.
    + namespace (string, optional) - The namespace where the Metafield was defined.
    + owner_id (number, optional) - Entity id to which is associated the metaField.
    + owner_resource (string, `Product`) - Type of entity to which is associated the Metafield.
    + created_at_min (string, optional, `2013-01-01T00:00:00-03:00`) - Show Products created after date (ISO 8601 format).
    + created_at_max (string, optional) - Show Products created before date (ISO 8601 format).
    + updated_at_min (string, optional) - Show Products last updated after date (ISO 8601 format).
    + updated_at_max (string, optional) - Show Products last updated before date (ISO 8601 format).
    + page (string, optional) - Page to show.
    + per_page (string, optional, `3`) - Amount of results.
    + fields (string, optional, `owner_id,key,value`) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        [
            {
                "key":"key3",
                "value":"3",
                "owner_id":2856934
            },
            {
                "key":"key4",
                "value":"4",
                "owner_id":2856934
            },
            {
                "key":"key5",
                "value":"5",
                "owner_id":2856934
            }
        ]

### Retrieve A Single Metafield [GET /metafields/#{id}]

+ Parameters
    + id (number, `11896`) - The unique numeric identifier for the Metafield.

+ Response 200 (application/json)

        {
            "id":11896,
            "key":"key0",
            "value":"0",
            "namespace":"namespace0",
            "description":"description0",
            "owner_id":2856959,
            "owner_resource":"Product",
            "created_at":"2015-01-02T20:01:50+0000",
            "updated_at":"2015-01-02T20:01:50+0000"
        }

### Create A New Metafield [POST /metafields/{?key,value,namespace,description,owner_id,owner_resource}]

+ Parameters
    + key (string, `the_key`) - String that identifies the Metafield in some namespace. It can be any string that starts with a letter followed only by: `a-z`, `A-Z`, `0-9` or `_`.
    + value (string, `its_value`) - Metafield's value (string).
    + namespace (string, `a_namespace`) - The namespace where the Metafield makes sense. It can be any string that starts with a letter followed only by: `a-z`, `A-Z`, `0-9` or `_`.
    + description (string, optional, `an adequate description`) - String explaining the Metafield's meaning.
    + owner_id (number, `2857023`) - Entity id to which is associated the Metafield.
    + owner_resource (string, `Product`) - Type of entity to which is associated the Metafield.

+ Response 201 (application/json)

        {
            "id":12877,
            "namespace":"a_namespace",
            "description":"an adequate description",
            "key":"the_key","value":"its_value",
            "owner_id":2857023,
            "owner_resource": "Product",
            "created_at":"2015-01-02 20:27:51",
            "updated_at":"2015-01-02 20:27:51",
            "deleted_at":null
        }

### Modify An Existing Metafield [PUT /metafields/#{id}{?value,description}]

+ Parameters
    + id (number, `13226`) - The unique numeric identifier for the Metafield.
    + value (string, optional,`new_value`) - Metafield's value (string).
    + description (string, optional, `a better description`) - String explaining the Metafield's meaning.

+ Response 200 (application/json)

        {
            "id":13226,
            "key":"key0",
            "value":"new_value",
            "namespace":"namespace0",
            "description":"a better description",
            "owner_id":2857047,
            "owner_resource":"Product",
            "created_at":"2015-01-02T20:32:08+0000",
            "updated_at":"2015-01-02T20:32:09+0000"
        }

### Delete A Metafield [DELETE /metafields/#{id}]

+ Parameters
    + id (number, `13226`) - The unique numeric identifier for the Metafield.

+ Response 200 (application/json)

        {
            
        }

# Group Script

## Introduction

The Script resource allows your app to register custom Javascript to be run in the store or in the checkout page. Also, if the user deletes your app, then they will not have to edit their theme to remove your JavaScript. When an app is uninstalled from a store, all of the scripts the app created are automatically removed along with it.

Before you begin, please take into consideration that:
* You cannot depend on any JavaScript available in the store's theme. Not even jQuery.
* Other applications may be installed and can include other JavaScript in addition to yours.
* When we include your script in the store, we will send a `store` parameter with the store id:```<script type="text/javascript" src="http://myapp.com/new.js?store=1234"></script>```

Ideally, your javascript should be inside a closure to avoid any conflict:
```
        (function(){
            // Your JavaScript
        })();
```

Use AJAX to load specific configurations for the store. Access your own defined URL with the store ID specified in that URL. Your app will serve those store settings in JSON format, which you can then use in your JavaScript file.

> **Note**: If you are going to use jQuery, you should load it in your JS using `jQuery.noConflict` as some stores already have jQuery in their themes. You should not assume the store has a cutting-edge jQuery version.

Please refer to the following examples:
```
        var loadScript = function(url, callback){
            /*
                JavaScript that will load the jQuery library
                on Google's CDN.
                We recommend this code:
                http://snipplr.com/view/18756/loadscript/
                Once the jQuery library is loaded,
                the callback function will be executed.
            */
        };
        
        var myAppJavaScript = function($){
            /*
                Your app's JavaScript here.
                $ in this scope references
                the jQuery object we'll use.
                Don't use 'jQuery' or 'jQuery191' here.
                Use the dollar sign
                that was passed as argument.
            */
            $('body').append(
                "<p>I'm using jQuery version "+$.fn.jquery+'</p>');
        };
        
        // For jQuery version 1.7
        var target = [1, 7, 0];
        
        var current = typeof jQuery === 'undefined' ? [0,0,0] :
            $.fn.jquery.split('.').map(function(item) {
                return parseInt(item);
        });
        
        if(current[0]<target[0] || (current[0]==target[0]&&current[1] < target[1]))
        {
            loadScript(
                '//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js',
                function(){
                    var jQuery1101 = jQuery.noConflict(true);
                    myAppJavaScript(jQuery1101);
                });
        } else {
            myAppJavaScript(jQuery);
        }
```

## Variables We Provide

We make your life easier by providing a Javascript object (called `LS`) with some common variables.

The following are the two `LS` Javascript objects we offer, one for the Store and another for Checkout:

### Store

```
        var LS = {
            store : {
                id : /* Store's id */,
                url : /* Store's URL */
            },
            cart : {
                subtotal : /* Cart's subtotal in cents */,
                items : [
                    /* For every cart item we have. */
                    {
                        id: /* Product Variant's id. */,
                        name: /* Product Variant's name. */,
                        unit_price: /*
                                        Product Variant's price
                                        in cents.
                                     */,
                        quantity: /*
                                     Quantity to be
                                     purchased.
                                   */
                    }
                ]
            },
            lang : /* Current language's code (e.g. pt_BR) */,
            currency : {
                code: /* Current currency in ISO 4217 format */
                display_short: /*
                                  Currency format string
                                  when the currency
                                  is not specified.
                                */
                display_long: /*
                                 Currency format string
                                 when the currency
                                 is specified.
                               */
                cents_separator: /* Symbol used for
                                    separating cents.
                                  */
                thousands_separator: /*
                                        Symbol used for
                                        separating thousands
                                        (could be blank).
                                      */
            },
            country : /* Current currency in ISO 3166-1 format. */,
            customer : /*
                          Current customer id or null
                          if there is no
                          logged-in customer.
                        */,
            theme : {
                code: /* Current theme's code. */,
                name: /* Current theme's name. */
            }
        }
```

#### Product

When on a `Product` page, the Store `LS` object also has the following:

```
        LS.product = {
            id : /* Product's id. */,
            name : /* Product's name. */,
            tags : /* Array of product's tags. */
        };
        LS.variants = /*
                        JSON encoded representation
                        of the product variants.
                       */;
```

#### Category

When on a `Category` page, the Store `LS` object also has the following:

```
        LS.category = {
            id : /* Category's id. */,
            name : /* Category's name. */
        };
```

### Checkout

```
        var LS = {
            store : {
                id : /* Store's id. */,
                url : /* Store's URL. */
            },
            cart : {
                subtotal : /* Cart's subtotal in cents. */,
                items : [
                    /* For every cart item we have. */
                    {
                        id: /* Product Variant's id. */,
                        name: /* Product Variant's name. */,
                        unit_price: /*
                                        Product Variant's price
                                        in cents.
                                     */,
                        quantity: /* Quantity to be purchased. */
                    }
                ]
            },
            customer : /*
                          Current customer id or null
                          if there is no logged-in customer.
                        */,
            lang : /* Current language's code (e.g. pt_BR). */,
            currency : /* Current currency in ISO 4217 format. */
        }
```

#### Thank You Page

When on the `Thank You` for your order page, the Checkout `LS` object also has the following:

```
        LS.order = {
            id : /* Order's id */,
            number : /* Order's number */,
            hash : /* Order's hash */,
            created_at : /* Order's creation date */,
            coupon : /*
                        Array of coupon codes that apply to this
                        order.
                     */,
            discount : /* Order's discount in cents */,
            total : /* Order's total in cents */,
            total_in_usd : /* Order's total in USD in cents */,
            gateway : /* Payment Gateway's code */
        };
```

> **Note**: When creating one, a Script will only appear in checkout if the src starts with `https://` in order not to break the SSL lock.

## Managing Scripts: Examples and Resources [/script]

+ Attributes
    + id (number) - The unique numeric identifier for the Script.
    + src (string) - Specifies the location of the Script.
    + event (string) - DOM event which triggers the loading of the script. Valid values are **onload** (default).
    + where (string) - A comma-separated list of places where the javascript will run. Valid values are **store** (default) or **checkout**.
    + `created_at` (string) - Date when the Script was created in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).
    + `updated_at` (string) - Date when the Script was last updated in [ISO 8601 format](en.wikipedia.org/wiki/ISO_8601).

### Retrieve All Scripts [GET /script{?since_id,src,created_at_min,created_at_max,updated_at_min,updated_at_max,page,per_page,fields}]

+ Parameters
    + `since_id` (string, optional) - Restrict results to after the specified ID.
    + `src` (string, optional) - Show scripts with a given URL.
    + `created_at_min` (string, optional) - Show Scripts created after date ([ISO 8601 format](en.wikipedia.org/wiki/ISO_8601)).
    + `created_at_max` (string, optional) - Show Scripts created before date ([ISO 8601 format](en.wikipedia.org/wiki/ISO_8601)).
    + `updated_at_min` (string, optional) - Show Scripts last updated after date ([ISO 8601 format](en.wikipedia.org/wiki/ISO_8601)).
    + `updated_at_max` (string, optional) - Show Scripts last updated before date ([ISO 8601 format](en.wikipedia.org/wiki/ISO_8601)).
    + `page` (string, optional) - Page to show.
    + `per_page` (string, optional) - Amount of results.
    + `fields` (string, optional) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        [
            {
                "created_at": "2013-01-03T09:11:51-03:00",
                "event": "onload",
                "id": 101,
                "src": "https://myapp.com/foo.js",
                "updated_at": "2013-03-11T09:14:11-03:00",
                "where": "store,checkout"
            },
            {
                "created_at": "2013-04-07T09:11:51-03:00",
                "event": "onload",
                "id": 5123,
                "src": "https://myapp.com/bar.js",
                "updated_at": "2013-04-08T11:11:51-03:00",
                "where": "store"
            },
            {
                "created_at": "2013-04-08T12:09:48-03:00",
                "event": "onload",
                "id": 6412,
                "src": "https://myapp.com/yet_another_script.js",
                "updated_at": "2013-04-08T11:11:53-03:00",
                "where": "checkout"
            }
        ]

+ Request

        "since_id": "1234"

+ Response 200 (application/json)

        [
            {
              "created_at": "2013-04-07T09:11:51-03:00",
              "event": "onload",
              "id": 5123,
              "src": "https://myapp.com/foo.js",
              "updated_at": "2013-04-08T11:11:51-03:00",
              "where": "store"
            },
            {
              "created_at": "2013-04-08T12:09:48-03:00",
              "event": "onload",
              "id": 6412,
              "src": "https://myapp.com/bar.js",
              "updated_at": "2013-04-08T11:11:53-03:00",
              "where": "checkout"
            }
        ]

### Retrieve A Single Script [GET /script/#{id}{?fields}]

+ Parameters
    + id (number, `101`) - The unique numeric identifier for the Script.
    + fields (string, optional) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        {
            "created_at": "2013-01-03T09:11:51-03:00",
            "event": "onload",
            "id": 101,
            "src": "https://myapp.com/foo.js",
            "updated_at": "2013-03-11T09:14:11-03:00",
            "where": "store,checkout"
        }

### Create A New Script [POST /script/{?src,event,where}]

+ Parameters
    + src (string, `https://myapp.com/new.js`) - Specifies the location of the Script.
    + event (string, `onload`) - DOM event which triggers the loading of the script. Valid values are **onload** (default).
    + where (string, `store`) - A comma-separated list of places where the javascript will run. Valid values are **store** (default) or **checkout**.

+ Response 201 (application/json)

        {
            "created_at": "2013-06-01T15:12:15-03:00",
            "event": "onload",
            "id": 8901,
            "src": "http://myapp.com/new.js",
            "updated_at": "2013-06-01T15:12:15-03:00",
            "where": "store"
        }

### Modify An Existing Script [POST /script/#{id}]

+ Parameters
    + id (number, `5123`) - The unique numeric identifier for the Script.

+ Request (application/json)

        {
            "created_at": "2013-04-07T09:11:51-03:00",
            "event": "onload",
            "id": 5123,
            "src": "https://myapp.com/another_bar.js",
            "updated_at": "2013-06-01T12:05:34-03:00",
            "where": "store"
        }

+ Response 200 (application/json)

        {
            "created_at": "2013-04-07T09:11:51-03:00",
            "event": "onload",
            "id": 5123,
            "src": "https://myapp.com/another_bar.js",
            "updated_at": "2013-06-01T12:11:14-03:00",
            "where": "store"
        }

### Remove A Script [DELETE /script/#{id}]

+ Response 200 (application/json)

        {
            
        }

# Group Webhook

## Introduction

A Webhook is a tool that allows you to receive a notification for a certain event. It allows you to register an http or https URL which will receive the event data, stored in JSON.

Webhooks can be registered for the following events:
| Category | Events |
| --- | --- |
| App | uninstalled/suspended/resumed |
| Category | created/updated/deleted |
| Order | created/updated/paid/fulfilled/cancelled |
| Product | created/updated/deleted |
| Domain | updated |
| Theme | updated |

To register for the product created event, for example, you should send `product/created` in the event field.

The `app/suspended` and `app/resumed` events refer to the [suspension of API access due to lack of payment](https://tiendanube.docs.apiary.io/#introduction/suspension-of-api-access-due-to-lack-of-payment).

> **Note**: You are not allowed to use a localhost/tiendanube/nuvemshop domain for webhooks.

### Verifying A Webhook

Webhooks created through the API can be verified by calculating a digital signature.

Each Webhook request includes a `X-Linkedstore-HMAC-SHA256` header which is generated using the app's secret, along with the data sent in the request.

> **Note**: Some frameworks will change the header to `HTTP_X_LINKEDSTORE_HMAC_SHA256`.

See PHP example below:

```
<?php

define('APP_SECRET', 'secret');

function verify_webhook($data, $hmac_header) {
  return $hmac_header == hash_hmac('sha256', $data, APP_SECRET);
}

$hmac_header = $_SERVER['HTTP_X_LINKEDSTORE_HMAC_SHA256'];
$data = file_get_contents('php://input');
$verified = verify_webhook($data, $hmac_header);
echo 'Webhook verified: ' . var_export($verified, true);
```

### Webhook Event Notifications

When doing the `POST` request, all webhooks will send the following parameters in JSON format:

* `store_id`: Store from where the event originated.
* `event`: Event's name.

Also, every webhook will send custom parameters depending on which event creates them, as follows:

#### app/uninstalled
When an app is uninstalled, the event will generate and forward you a JSON with the following extra parameter:
* id: App's id

Example webhook content:
```
{
    'store_id':123,
    'event':'app/uninstalled',
    'id':1948209
}
```

#### category/created - category/updated - category/deleted
When an app's category is somehow modified, the event will generate and forward you a JSON with the following extra parameter:
* id: Category's id

Example webhook content:
```
{
    'store_id':354,
    'event':'category/created',
    'id':11
}
```

#### order/created - order/updated - order/paid - order/fulfilled - order/cancelled
When an order's status is changed, the event will generate and forward you a JSON with the following extra parameter:
* id: Order's id

Example webhook content:
```
{
    'store_id':876,
    'event':'product/created',
    'id':48708
}
```

#### product/created - product/updated - product/deleted
When an product's status is changed, the event will generate and forward you a JSON with the following extra parameter:
* id: Product's id

Example webhook content:
```
{
    'store_id':910,
    'event':'product/created',
    'id':165
}
```

#### domain/updated
When an app's domain is changed, the event will generate and forward you an empty JSON:
* no additional parameter is sent along with this event. To get the list of domains one may refer to [Store](tiendanube.docs.apiary.io/#reference/store) resources.

Example webhook content:
```
{
    'store_id':723,
    'event':'domain/updated',
}
```

#### theme/updated
When an app's theme is changed, the event will generate and forward you a JSON containing the following extra parameters:
* old_theme: Old Theme's code
* new_theme: New Theme's code

Example webhook content:
```
{
    'store_id':821,
    'event':'theme/updated',
    'old_theme':7862354
    'new_theme':9834511
}
```

### Retry Policies
A webhook notification expects a 200 status code in `response`. If this does not happen (it gets another response code or no response at all) we will retry to deliver the notification 14 times along the next three days in incremental lapses of time. After this, the notification is lost.

## Managing Webhooks: Examples and Resources [/webhook]

+ Attributes
    + id (number) - The unique numeric identifier for the webhook.
    + url (string) - The URL where the webhook should send the POST request when the event occurs.
    + event (string) - The event that will trigger the webhook.
    + `created_at` (string) - Date when the webhook was created in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
    + `updated_at` (string) - Date when the webhook was last updated in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).

### Retrieve All Webhooks [GET /webhook{?since_id,url,event,created_at_min,created_at_max,updated_at_min,updated_at_max,page,per_page,fields}]

+ Parameters
    + `since_id` (string, optional) - Restrict results to after the specified ID.
    + `url` (string, optional) - Show webhooks tags with a given URL.
    + `event` (string, optional) - Show webhooks with a given event.
    + `created_at_min` (string, optional) - Show Webhooks created after date ([ISO 8601 format](en.wikipedia.org/wiki/ISO_8601)).
    + `created_at_max` (string, optional) - Show Webhooks created before date ([ISO 8601 format](en.wikipedia.org/wiki/ISO_8601)).
    + `updated_at_min` (string, optional) - Show Webhooks last updated after date ([ISO 8601 format](en.wikipedia.org/wiki/ISO_8601)).
    + `updated_at_max` (string, optional) - Show Webhooks last updated before date ([ISO 8601 format](en.wikipedia.org/wiki/ISO_8601)).
    + `page` (string, optional) - Page to show.
    + `per_page` (string, optional) - Amount of results.
    + `fields` (string, optional) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        [
            {
                "created_at": "2013-01-03T09:11:51-03:00",
                "event": "app/uninstalled",
                "id": 101,
                "updated_at": "2013-03-11T09:14:11-03:00",
                "url": "http://myapp.com/uninstall"
            },
            {
                "created_at": "2013-04-07T09:11:51-03:00",
                "event": "order/created",
                "id": 5670,
                "updated_at": "2013-04-08T11:11:51-03:00",
                "url": "http://myapp.com/order_created_hook"
            }
        ]
        
+ Request

        "since_id": "1234"

+ Response 200 (application/json)

        [
            {
                "created_at": "2013-04-07T09:11:51-03:00",
                "event": "order/created",
                "id": 5670,
                "updated_at": "2013-04-08T11:11:51-03:00",
                "url": "http://myapp.com/order_created_hook"
            }
        ]


### Retrieve A Single Webhook [GET /webhooks/#{id}{?fields}]

+ Parameters
    + id (number, `5670`) - This is the Webhook's unique ID.
    + fields (string, optional) - Comma-separated list of fields to include in the response.

+ Response 200 (application/json)

        {
            "created_at": "2013-04-07T09:11:51-03:00",
            "event": "order/created",
            "id": 5670,
            "updated_at": "2013-04-08T11:11:51-03:00",
            "url": "http://myapp.com/order_created_hook"
        }

### Create A New Webhook [POST /webhook/{?url,event}]

+ Parameters
    + url (string, `http://myapp.com/product_created_hook`) - Show webhooks tags with a given URL.
    + event (string, `product/created`) - Show webhooks with a given event.

+ Response 201 (application/json)

        {
            "created_at": "2013-06-01T15:12:15-03:00",
            "event": "product/created",
            "id": 8901,
            "updated_at": "2013-06-01T15:12:15-03:00",
            "url": "http://myapp.com/product_created_hook"
        }

### Modify An Existing Webhook [POST /webhooks/#{id}]

+ Request (application/json)

        {
            "created_at": "2013-04-07T09:11:51-03:00",
            "event": "category/created",
            "id": 5670,
            "updated_at": "2013-04-08T11:11:51-03:00",
            "url": "http://myapp.com/category_created_hook"
        }

+ Response 200

        {
            "created_at": "2013-04-07T09:11:51-03:00",
            "event": "category/created",
            "id": 5670,
            "updated_at": "2013-06-01T12:11:14-03:00",
            "url": "http://myapp.com/category_created_hook"
        }

### Remove A Webhook [DELETE /webhooks/#{id}]

+ Response 200

        {
            
        }